%option reentrant

%decls %{

#include <stdbool.h>

#include "types.h"

#define OP_AND      0
#define OP_OR       1
#define OP_PLUS     2
#define OP_MINUS    3
#define OP_MUL      4
#define OP_DIV      5
#define OP_MOD      6
#define OP_EQ       7
#define OP_NE       8
#define OP_LT       9
#define OP_LE      10
#define OP_GE      11
#define OP_GT      12
#define OP_CONCAT  13

#define SYMBOL_VAR      0
#define SYMBOL_LOCAL    1
#define SYMBOL_OBJECT   2
#define SYMBOL_SYSTEM   3

typedef union
{
	int		int_value;
	float	float_value;

} eval_value;

%}

%{
#include "cc_ast.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

%}

%node ast_node %abstract %typedef = {
}

// XXX many of these do not need to be ast_nodes, only really statements and further in...
%node list_entry ast_node = {
    ast_node *entry;
    list_entry *prev;
}

%node object_def ast_node = {
	char *name;
	bool exported;
	list_entry *globals;
	list_entry *slots;
}

%node global ast_node = {
	char *name;
	ast_node *value;
}

%node slot ast_node = {
	char *name;
	list_entry *arguments;
    block *body;
}

%node argument ast_node = {
	char *name;
}

%node statement ast_node %abstract %typedef = {
}

%node block statement = {
    list_entry *statements;
}

%node var_decl statement = {
    char *name;
    expression *init_expr;
}

%node assignment statement = {
    char *name;
    expression *expr;
    int type;
}

%node return_stmt statement = {
    expression *ret_expr;
}

%node expr_exec statement = {
    expression *expr;
}

%node expression ast_node %abstract %typedef = {
}

%node literal expression = {
    val value;
}

%node this_expr expression = {
}

%node binary_expr expression = {
    expression *left;
    expression *right;
    int op;
}

%node clone_expr expression = {
    expression *proto_expr;
}

%node not_expr expression = {
    expression *child_expr;
}

%node symbol_lookup expression = {
    char *name;
    int type;
}

%node call expression = {
    expression *obj_expr;
    char *name;
    list_entry *arg_exprs;
    int type;
}

%operation void dump(ast_node *n, int d, bool first, bool comma)

dump(list_entry) {
    if (n->prev) {
        dump((ast_node*)n->prev, d, false, comma);
        if (comma) {
            printf(", ");
        }
        dump(n->entry, d, false, comma);
    }
    else {
        dump(n->entry, d, true, comma);
    }
}

dump(object_def) {
    char *indent = alloca(d*2+1);
    memset(indent, ' ', d*2);
    indent[d*2] = '\0';
    printf("# %s%sObject %s {\n", 
        indent,
        n->exported ? "Exported " : "",
        n->name);
    if (n->globals) {
        dump((ast_node*)n->globals, d+1, false, false);
    }
    if (n->slots) {
        dump((ast_node*)n->slots, d+1, false, false);
    }
    printf("# %s}\n\n", indent);
}

dump(global) {
    char *indent = alloca(d*2+1);
    memset(indent, ' ', d*2);
    indent[d*2] = '\0';
    printf("# %sGlobal %s = ", 
        indent, 
        n->name);
    dump((ast_node*)n->value, d, false, false);
    printf(";\n");
}

dump(slot) {
    char *indent = alloca(d*2+1);
    memset(indent, ' ', d*2);
    indent[d*2] = '\0';
    printf("# %sSlot %s(", indent, n->name);
    if (n->arguments) {
        dump((ast_node*)n->arguments, d, false, false);
    }
    printf(") ");
    dump((ast_node*)n->body, d, false, false);
}

dump(argument) {
    printf("%s%s", first ? "" : ", ", n->name);
}

dump(block) {
    char *indent = alloca(d*2+1);
    memset(indent, ' ', d*2);
    indent[d*2] = '\0';
    printf("{\n");
    if (n->statements) {
        dump((ast_node*)n->statements, d+1, false, false);
    }
    printf("# %s}\n", indent);
}

dump(var_decl) {
    char *indent = alloca(d*2+1);
    memset(indent, ' ', d*2);
    indent[d*2] = '\0';
    printf("# %sVar %s = ", indent, n->name);
    dump((ast_node*)n->init_expr, d, false, false);
    printf(";\n");
}

dump(assignment) {
    char *indent = alloca(d*2+1);
    memset(indent, ' ', d*2);
    indent[d*2] = '\0';
    printf("# %s%s%s = ", indent, n->type == SYMBOL_LOCAL ? "." : "", n->name);
    dump((ast_node*)n->expr, d, false, false);
    printf(";\n");
}

dump(return_stmt) {
    char *indent = alloca(d*2+1);
    memset(indent, ' ', d*2);
    indent[d*2] = '\0';
    printf("# %sreturn ", indent);
    dump((ast_node*)n->ret_expr, d, false, false);
    printf(";\n");
}

dump(expr_exec) {
    char *indent = alloca(d*2+1);
    memset(indent, ' ', d*2);
    indent[d*2] = '\0';
    printf("# %s", indent);
    dump((ast_node*)n->expr, d, false, false);
    printf(";\n");
}

dump(literal) {
    char *tval = val_print(n->value);
    printf("%s", tval);
    free(tval);
}

dump(this_expr) {
    printf("This");
}

dump(clone_expr) {
    printf("Clone ");
    dump((ast_node*)n->proto_expr, d, false, false);
}

dump(not_expr) {
    printf("(Not ");
    dump((ast_node*)n->child_expr, d, false, false);
    printf(")");
}

dump(binary_expr) {
    printf("(");
    dump((ast_node*)n->left, d, false, false);
    switch (n->op) {
        case OP_AND:
            printf(" AND ");
            break;
        case OP_OR:
            printf(" OR ");
            break;
        case OP_PLUS:
            printf(" + ");
            break;
        case OP_MINUS:
            printf(" - ");
            break;
        case OP_MUL:
            printf(" * ");
            break;
        case OP_DIV:
            printf(" / ");
            break;
        case OP_MOD:
            printf(" %% ");
            break;
        case OP_EQ:
            printf(" == ");
            break;
        case OP_NE:
            printf(" != ");
            break;
        case OP_LT:
            printf(" < ");
            break;
        case OP_LE:
            printf(" <= ");
            break;
        case OP_GE:
            printf(" >= ");
            break;
        case OP_GT:
            printf(" > ");
            break;
        case OP_CONCAT:
            printf(" ~ ");
            break;
        default:
            printf(" ?? ");
    }
    dump((ast_node*)n->right, d, false, false);
    printf(")");
}

dump(symbol_lookup) {
    switch(n->type) {
        case SYMBOL_LOCAL:
            printf(".%s", n->name);
            break;
        case SYMBOL_OBJECT:
            printf("@%s", n->name);
            break;
        case SYMBOL_VAR:
            printf("%s", n->name);
            break;
        default:
            printf(" ?? ");
    }
}

dump(call) {
    switch(n->type) {
        case SYMBOL_LOCAL:
            printf(".%s(", n->name);
            if (n->arg_exprs) {
                dump((ast_node*)n->arg_exprs, d, false, true);
            }
            printf(")");
            break;
        case SYMBOL_OBJECT:
            dump((ast_node*)n->obj_expr, d, false, false);
            printf(".%s(", n->name);
            if (n->arg_exprs) {
                dump((ast_node*)n->arg_exprs, d, false, true);
            }
            printf(")");
            break;
        case SYMBOL_SYSTEM:
            printf("_%s(", n->name);
            if (n->arg_exprs) {
                dump((ast_node*)n->arg_exprs, d, false, true);
            }
            printf(")");
            break;
        default:
            printf(" ?? ");
    }
}

%end %{

char *yycurrfilename(YYNODESTATE *state) {
    return "";
}

long yycurrlinenum(YYNODESTATE *state) {
    return 0;
}

void yynodefailed(YYNODESTATE *state) {
	fprintf(stderr, "virtual memory exhausted\n");
	exit(1);
}
 
%}
