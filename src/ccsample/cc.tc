%option reentrant

%decls %{

#include <stdbool.h>

typedef union
{
	int		int_value;
	float	float_value;

} eval_value;

%}

%{
#include "cc_ast.h"

#include <stdio.h>
#include <stdlib.h>

%}

%node ast_node %abstract %typedef = {
}

// XXX many of these do not need to be ast_nodes, only really statements and further in...
%node list_entry ast_node = {
    ast_node *entry;
    list_entry *prev;
}

%node object_def ast_node = {
	char *name;
	bool exported;
	list_entry *globals;
	list_entry *slots;
}

%node global ast_node = {
	char *name;
	ast_node *expr;
}

%node slot ast_node = {
	char *name;
	list_entry *arguments;
    block *body;
}

%node argument ast_node = {
	char *name;
}

%node statement ast_node %abstract %typedef = {
}

%node block statement = {
    list_entry *statements;
}

%node var_decl statement = {
    char *name;
    expression *init_expr;
}

%node expression ast_node %abstract %typedef = {
}

%operation void dump(ast_node *n, int d)

dump(list_entry) {
    if (n->prev) {
        dump((ast_node*)n->prev, d);
    }
    dump(n->entry, d);
}

dump(object_def) {
    char *indent = alloca(d*2+1);
    memset(indent, ' ', d*2);
    indent[d*2] = '\0';
    printf("# %s%sObject %s {\n", 
        indent,
        n->exported ? "Exported " : "",
        n->name);
    dump((ast_node*)n->globals, d+1);
    dump((ast_node*)n->slots, d+1);
    printf("# %s}", indent);
}

dump(global) {
    char *indent = alloca(d*2+1);
    memset(indent, ' ', d*2);
    indent[d*2] = '\0';
    printf("# %sGlobal %s = ;\n", 
        indent, 
        n->name);
}

dump(slot) {
    char *indent = alloca(d*2+1);
    memset(indent, ' ', d*2);
    indent[d*2] = '\0';
    printf("# %sSlot %s() ", indent, n->name);
    dump((ast_node*)n->body, d);
}

dump(argument) {
    // XXX
}

dump(block) {
    char *indent = alloca(d*2+1);
    memset(indent, ' ', d*2);
    indent[d*2] = '\0';
    printf("{\n");
    if (n->statements) {
        dump(n->statements, d+1);
    }
    printf("# %s}\n", indent);
}

dump(var_decl) {
    char *indent = alloca(d*2+1);
    memset(indent, ' ', d*2);
    indent[d*2] = '\0';
    printf("# %sVar %s = ;\n", indent, n->name);
}

%end %{

char *yycurrfilename(YYNODESTATE *state) {
    return "";
}

long yycurrlinenum(YYNODESTATE *state) {
    return 0;
}

void yynodefailed(YYNODESTATE *state) {
	fprintf(stderr, "virtual memory exhausted\n");
	exit(1);
}
 
%}
